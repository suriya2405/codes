SERVER:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080

int main() {
    int server_socket, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};

    // Create server socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket to the given IP and port
    if (bind(server_socket, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_socket, 1) < 0) {
        perror("listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    if ((new_socket = accept(server_socket, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        perror("accept error");
        exit(EXIT_FAILURE);
    }

    while (1) {
        int valread = read(new_socket, buffer, sizeof(buffer));
        buffer[valread] = '\0';
        printf("Client: %s\n", buffer);

        if (strcmp(buffer, "Bye") == 0) {
            printf("Client disconnected\n");
            break;
        }

        printf("Enter message to client: ");
        fgets(buffer, sizeof(buffer), stdin);
        buffer[strcspn(buffer, "\n")] = '\0';
        send(new_socket, buffer, strlen(buffer), 0);

        if (strcmp(buffer, "Bye") == 0) {
            printf("Closing server\n");
            break;
        }
    }

    close(new_socket);
    close(server_socket);

    return 0;
}

CLIENT:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080

int main() {
    int client_socket;
    struct sockaddr_in server_address;
    char buffer[1024] = {0};

    // Create socket
    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket creation error");
        exit(EXIT_FAILURE);
    }

    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(PORT);

    if (inet_pton(AF_INET, "127.0.0.1", &server_address.sin_addr) <= 0) {
        perror("invalid address");
        exit(EXIT_FAILURE);
    }

    // Connect to server
    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
        perror("connection error");
        exit(EXIT_FAILURE);
    }

    while (1) {
        printf("Enter message to server: ");
        fgets(buffer, sizeof(buffer), stdin);
        buffer[strcspn(buffer, "\n")] = '\0';
        send(client_socket, buffer, strlen(buffer), 0);

        if (strcmp(buffer, "Bye") == 0) {
            printf("Closing client\n");
            break;
        }

        int valread = recv(client_socket, buffer, sizeof(buffer), 0);
        buffer[valread] = '\0';
        printf("Server: %s\n", buffer);

        if (strcmp(buffer, "Bye") == 0) {
            printf("Server disconnected\n");
            break;
        }
    }

    close(client_socket);

    return 0;
}

