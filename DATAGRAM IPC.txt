SERVER:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345
#define MAX_MSG_LEN 1024

int main() {
    int sockfd;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrLen = sizeof(clientAddr);
    char buffer[MAX_MSG_LEN];

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    // Bind socket to server address
    if (bind(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening...\n");

    while (1) {
        // Receive message from a client
        ssize_t recvLen = recvfrom(sockfd, buffer, MAX_MSG_LEN, 0, (struct sockaddr*)&clientAddr, &addrLen);
        if (recvLen == -1) {
            perror("Receive error");
            continue;
        }
        buffer[recvLen] = '\0';

        // Display received message
        printf("Client %s:%d says: %s\n", inet_ntoa(clientAddr.sin_addr), ntohs(clientAddr.sin_port), buffer);

        // Broadcast the message to all clients
        for (int i = 0; i < MAX_CLIENTS; i++) {
            if (clientSockets[i] != 0 && clientSockets[i] != sockfd) {
                sendto(clientSockets[i], buffer, strlen(buffer), 0, (struct sockaddr*)&clientAddr, addrLen);
            }
        }
    }

    close(sockfd);
    return 0;
}

CLIENT:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define PORT 12345
#define MAX_MSG_LEN 1024

int main() {
    int sockfd;
    struct sockaddr_in serverAddr;
    char buffer[MAX_MSG_LEN];

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    if (inet_pton(AF_INET, SERVER_IP, &serverAddr.sin_addr) <= 0) {
        perror("Invalid address");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("Enter your message (or 'exit' to quit):\n");

    while (1) {
        // Read message from user
        fgets(buffer, MAX_MSG_LEN, stdin);
        buffer[strcspn(buffer, "\n")] = '\0'; // Remove trailing newline

        // Exit condition
        if (strcmp(buffer, "exit") == 0) {
            break;
        }

        // Send message to server
        sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
    }

    close(sockfd);
    return 0;
}

