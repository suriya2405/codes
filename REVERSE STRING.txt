#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345
#define BUFFER_SIZE 1024

int main() {
    int serverSocket, newSocket;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrSize = sizeof(clientAddr);
    
    char buffer[BUFFER_SIZE];
    
    // Create socket
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }
    
    // Initialize server address structure
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(PORT);
    
    // Bind the socket
    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Socket binding failed");
        exit(EXIT_FAILURE);
    }
    
    // Listen for connections
    if (listen(serverSocket, 5) == -1) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }
    
    printf("Server is listening on port %d...\n", PORT);
    
    while (1) {
        // Accept a new connection
        newSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &addrSize);
        if (newSocket == -1) {
            perror("Accept failed");
            continue;
        }
        
        printf("Client connected: %s:%d\n", inet_ntoa(clientAddr.sin_addr), ntohs(clientAddr.sin_port));
        
        // Receive data from client
        int bytesRead = recv(newSocket, buffer, BUFFER_SIZE, 0);
        if (bytesRead == -1) {
            perror("Receive failed");
            close(newSocket);
            continue;
        }
        
        buffer[bytesRead] = '\0';
        printf("Received: %s\n", buffer);
        
        // Reverse the received string
        int len = strlen(buffer);
        for (int i = 0; i < len / 2; i++) {
            char temp = buffer[i];
            buffer[i] = buffer[len - i - 1];
            buffer[len - i - 1] = temp;
        }
        
        // Send the reversed string back to client
        if (send(newSocket, buffer, strlen(buffer), 0) == -1) {
            perror("Send failed");
        }
        
        printf("Reversed string sent back to client: %s\n", buffer);
        
        close(newSocket);
    }
    
    close(serverSocket);
    
    return 0;
}
