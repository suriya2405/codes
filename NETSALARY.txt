SERVER:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>

#define PORT 8080

int main() {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Set socket options
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    // Accept and process connections
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
        perror("accept");
        exit(EXIT_FAILURE);
    }

    // Read data from client
    valread = read(new_socket, buffer, 1024);

    // Calculate net salary
    float basic, hra, da, pt, epf, net_salary;
    sscanf(buffer, "%f %f %f %f %f", &basic, &hra, &da, &pt, &epf);
    net_salary = basic + hra + da - pt - epf;

    // Send net salary to client
    char result[50];
    sprintf(result, "Net Salary: %.2f", net_salary);
    send(new_socket, result, strlen(result), 0);

    return 0;
}

CLIENT:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>

#define PORT 8080

int main() {
    int sock = 0, valread;
    struct sockaddr_in serv_addr;
    char buffer[1024] = {0};

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\n Socket creation error \n");
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }

    // Connect to server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed \n");
        return -1;
    }

    // Input employee details
    float basic, hra, da, pt, epf;
    printf("Enter Basic Pay: ");
    scanf("%f", &basic);
    printf("Enter HRA: ");
    scanf("%f", &hra);
    printf("Enter DA: ");
    scanf("%f", &da);
    printf("Enter PT: ");
    scanf("%f", &pt);
    printf("Enter EPF: ");
    scanf("%f", &epf);

    // Send data to server
    char data[1024];
    sprintf(data, "%.2f %.2f %.2f %.2f %.2f", basic, hra, da, pt, epf);
    send(sock, data, strlen(data), 0);

    // Receive and print response from server
    valread = read(sock, buffer, 1024);
    printf("%s\n", buffer);

    return 0;
}

